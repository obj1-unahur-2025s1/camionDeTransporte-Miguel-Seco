import cosas.*
import camion.*

describe "test para paquete de ladrillos" {
  method initialize(){
    paqueteLadrillos.agregarLadrillos(100)
  }

  test "peso del pack de ladrillos" {
    assert.equals(200, paqueteLadrillos.peso())
  }

  test"se agregan 10 ladrillos al pack"{
    paqueteLadrillos.agregarLadrillos(10)
    assert.equals(110, paqueteLadrillos.cantLadrillos())
  }

  test"al pack de 100 se quitan 25 ladrillos al pack se espera 75"{
    paqueteLadrillos.quitarLadrillos(25)
    assert.equals(75, paqueteLadrillos.cantLadrillos())
  }

  test "peso del pack de ladrillos luego de quitar 25, se espera 150" {
    paqueteLadrillos.quitarLadrillos(25)
    assert.equals(150, paqueteLadrillos.peso())
  }

}

describe "test bateriaAntiAerea " {
  test "estado actual de la bateria antiaerea tiene misiles" {
    assert.equals(misiles,bateriaAntiaerea.estadoActual())
  }
  test " peso de la bateria con misiles 300"{
    assert.equals(300,bateriaAntiaerea.peso())
  }
  test "estado actual de la bateria antiaerea cambia a otra cosa" {
    bateriaAntiaerea.cambiarEstado(otraCosa)
    assert.equals(otraCosa,bateriaAntiaerea.estadoActual())
  }

  test " peso de la bateria sin misiles se espera 200"{
    bateriaAntiaerea.cambiarEstado(otraCosa)
    assert.equals(200,bateriaAntiaerea.peso())
  }
}

describe "test contenedor portuario" {
  
  method initialize(){
    contenedorPortuario.agregarCosa(bumblebee )
    contenedorPortuario.agregarCosa(knightRider)
    contenedorPortuario.agregarCosa(bateriaAntiaerea)
  }

  test "peso del contenedor portuario sin cosas adentro" {
    contenedorPortuario.quitarCosa(bumblebee )
    contenedorPortuario.quitarCosa(knightRider )
    contenedorPortuario.quitarCosa(bateriaAntiaerea)
    assert.equals(100,contenedorPortuario.peso())
  }

  test "agregar 3 cosas al contenedor"{
    assert.that(contenedorPortuario.cosasDelContenedor().contains(bumblebee))
    assert.that(contenedorPortuario.cosasDelContenedor().contains(knightRider))
    assert.that(contenedorPortuario.cosasDelContenedor().contains(bateriaAntiaerea))
  }

  test "peso del contenedor con 3 cosas adentro"{
    assert.equals(500 + 500 + 300 + 100,contenedorPortuario.peso())
  }
  }

  describe "test de embalajeDeSeguridad" {
    test "embalar residuos radioactivos que pesan 30 kg" {
      residuosRadioActivos.peso(30)
      embalajeDeSeguridad.embalar(residuosRadioActivos)
      assert.equals(30, embalajeDeSeguridad.peso())
      assert.equals(100, embalajeDeSeguridad.peligrosidad())
    }
  }

  describe "test camion" {
      method initialize(){ 
        bumblebee.transformar(robot)
        arenaGranel.peso(150)
        paqueteLadrillos.cantLadrillos(80)
        embalajeDeSeguridad.embalar(paqueteLadrillos)
        camion.cargar(bumblebee)
        camion.cargar(bateriaAntiaerea)
        camion.cargar(paqueteLadrillos)
      }
    test "camion cargado con bumblebee robot,arenaGranel,bateriaAntiaerea, paquete de ladrillos embalado" {

      assert.that(camion.cargaDelCamion().contains(bumblebee))
      assert.that(camion.cargaDelCamion().contains(bateriaAntiaerea))
      assert.that(camion.cargaDelCamion().contains(paqueteLadrillos))
      assert.that(camion.hayAlgunaCosaQuepesa(160))
    }
    test "peso total del camion 2260"{
      
      assert.equals(800 + 300 + 160+ 1000, camion.pesoTotalDelCamion())
      assert.that(camion.cargaDelCamion().contains(bumblebee))
      assert.that(camion.cargaDelCamion().contains(bateriaAntiaerea))
      assert.that(camion.cargaDelCamion().contains(paqueteLadrillos))
     }

    test"peso de las cosas cargadas es par" {
      assert.that(camion.pesoDeLasCosasCargadasEsNumeroPar())
    }     

    test"cosa con mayor peligrosidad dentro de la carga del camion" {
      assert.equals(bateriaAntiaerea, camion.obtenerLaPrimeraCosaCargadaConNivelDePeligrosidad(100))
      
    }

    test"cosa mas liviana que tiene cargada el camion" {
      assert.equals(paqueteLadrillos,camion.cosaMasLivianaQueTieneCargada() )
    }
  }